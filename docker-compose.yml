services:
  # Microservicio Academic Service
  academic-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Usar etapa de desarrollo
    container_name: academic-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_SSL=${DATABASE_SSL}
      - DATABASE_URL=${DATABASE_URL}  # URL completa de Render
      - PORT=3000
      # Redis configuration
      - REDIS_HOST=redis-academic
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
    ports:
      - "3000:3000"
    volumes:
      - .:/app                    # Bind mount para desarrollo
      - /app/node_modules         # Volumen an√≥nimo para node_modules
    networks:
      - academic-network
    depends_on:
      - redis-academic
    command: yarn start:dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para las colas
  redis-academic:
    image: redis:7-alpine
    container_name: redis-academic
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - academic-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  redis-data:
    driver: local

networks:
  academic-network:
    driver: bridge